import dotenv from "dotenv";
import { ethers } from "hardhat";
import { setBalance } from "@nomicfoundation/hardhat-network-helpers";
import assert from "assert";
import fs from "fs";
const yaml = require("js-yaml");

import { Store } from "./customTypes";

dotenv.config();

type Account = {
  address: string;
  privateKey: string;
};

class AccountsManager {
  clientAccount: any;
  deployerAccount: any;
  storeAccounts: {
    [key: string]: any;
  };

  constructor(
    {
      clientAccount,
      deployerAccount,
      storeAccounts
    }
    :
    {
      clientAccount: any,
      deployerAccount: any,
      storeAccounts: {
        [key: string]: any;
      }
    }
  ) {
    this.clientAccount = clientAccount;
    this.deployerAccount = deployerAccount;
    this.storeAccounts = storeAccounts;
  }

  connectAccountsWithContract(contract: any): void {
    for (const storeKey in this.storeAccounts) {
      if (Object.prototype.hasOwnProperty.call(this.storeAccounts, storeKey)) {
        contract.connect(this.storeAccounts[storeKey]);
        console.log(`Connecting ${contract} with storeAccount ${storeKey}`);
      }
    }
  }
}

// This is the account used to deploy the contract to ThirdWeb
const deployerAccount: Account = {
  address: process.env.DEPLOYER_ADDRESS || "",
  privateKey: process.env.DEPLOYER_PRIVATE_KEY || "",
};

const getAccounts = async () => {
  const signers = await ethers.getSigners();
  var deployerAccountSigner;
  if (process.env.DEPLOYER_PRIVATE_KEY != null && process.env.DEPLOYER_ADDRESS != null) {
    deployerAccountSigner = new ethers.Wallet(process.env.DEPLOYER_PRIVATE_KEY, ethers.provider);
    if ((await ethers.provider.getBalance(process.env.DEPLOYER_ADDRESS) < 1e19)) {
      setBalance(process.env.DEPLOYER_ADDRESS, 1e22);
    }
  } else {
    deployerAccountSigner = signers[0];
  }
  var accountsObject = {
    clientAccount: signers[1],
    deployerAccount: deployerAccountSigner,
  };
  return accountsObject;
}

const storeAccount = {
  address: "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
  privateKey:
    "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80",
};

const storeAccount2 = {
  address: "0x90F79bf6EB2c4f870365E785982E1f101E93b906",
  privateKey:
    "0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6",
};

const customerAccount = {
  address: "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
  privateKey:
    "0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d",
};

// This are the test accounts generated by hardhat when running `npx hardhat node`
const accounts: Account[] = [storeAccount, storeAccount2, customerAccount];

export {
  accounts,
  customerAccount,
  storeAccount,
  storeAccount2,
  deployerAccount,
  Account,
  getAccounts
};
